function(egttools_enable_blas_lapack target)
    set(EGTTOOLS_BLAS_LAPACK_ENABLED OFF)

    if (APPLE)
        # Try to find Accelerate framework
        find_library(ACCELERATE_FRAMEWORK Accelerate)

        if (ACCELERATE_FRAMEWORK)
            message(STATUS "[Accelerate] Found and enabled: ${ACCELERATE_FRAMEWORK}")
            target_link_libraries(${target} PRIVATE "${ACCELERATE_FRAMEWORK}")
            target_compile_definitions(${target} PRIVATE EIGEN_USE_BLAS)
            set(EGTTOOLS_BLAS_LAPACK_ENABLED ON)
        else ()
            message(WARNING "[Accelerate] Not found. Trying OpenBLAS or LAPACK...")

            find_package(BLAS)
            find_package(LAPACK)
            find_library(LAPACKE_LIB NAMES lapacke HINTS ${CMAKE_PREFIX_PATH} PATH_SUFFIXES lib lib64)

            if (BLAS_FOUND)
                message(STATUS "[BLAS] Found and enabled")
            else ()
                message(WARNING "[BLAS] Not found")
            endif ()

            if (LAPACK_FOUND)
                message(STATUS "[LAPACK] Found and enabled")
            else ()
                message(WARNING "[LAPACK] Not found")
            endif ()

            if (BLAS_FOUND AND LAPACK_FOUND)
                if (TARGET LAPACK::LAPACK)
                    target_link_libraries(${target} PRIVATE LAPACK::LAPACK)
                else ()
                    target_link_libraries(${target} PRIVATE ${LAPACK_LIBRARIES})
                endif ()
                target_compile_definitions(${target} PRIVATE EIGEN_USE_BLAS)
                set(EGTTOOLS_BLAS_LAPACK_ENABLED ON)

                if (LAPACKE_LIB)
                    message(STATUS "[LAPACKE] Found and enabled")
                    target_link_libraries(${target} PRIVATE ${LAPACKE_LIB})
                    target_compile_definitions(${target} PRIVATE EIGEN_USE_LAPACKE)
                else ()
                    message(WARNING "[LAPACKE] Not found — using LAPACK directly")
                endif ()
            endif ()
        endif ()

    else () # Linux, Windows
        find_package(BLAS)
        find_package(LAPACK)
        find_library(LAPACKE_LIB NAMES lapacke HINTS ${CMAKE_PREFIX_PATH} PATH_SUFFIXES lib lib64)

        if (BLAS_FOUND)
            message(STATUS "[BLAS] Found and enabled")
        else ()
            message(WARNING "[BLAS] Not found")
        endif ()

        if (LAPACK_FOUND)
            message(STATUS "[LAPACK] Found and enabled")
        else ()
            message(WARNING "[LAPACK] Not found")
        endif ()

        if (BLAS_FOUND AND LAPACK_FOUND)
            if (TARGET LAPACK::LAPACK)
                target_link_libraries(${target} PRIVATE LAPACK::LAPACK)
            else ()
                target_link_libraries(${target} PRIVATE ${LAPACK_LIBRARIES})
            endif ()
            target_compile_definitions(${target} PRIVATE EIGEN_USE_BLAS)
            set(EGTTOOLS_BLAS_LAPACK_ENABLED ON)

            if (LAPACKE_LIB)
                message(STATUS "[LAPACKE] Found and enabled")
                target_link_libraries(${target} PRIVATE ${LAPACKE_LIB})
                target_compile_definitions(${target} PRIVATE EIGEN_USE_LAPACKE)
            else ()
                message(WARNING "[LAPACKE] Not found — using LAPACK directly")
            endif ()
        endif ()
    endif ()

    # Final EGTtools status message
    if (EGTTOOLS_BLAS_LAPACK_ENABLED)
        message(STATUS "[EGTtools] BLAS/LAPACK acceleration: ON")
    else ()
        message(STATUS "[EGTtools] BLAS/LAPACK acceleration: OFF")
    endif ()
endfunction()
