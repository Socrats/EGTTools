name: Build Wheels

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable tmate debugging session'
        required: false
        default: false
  pull_request:
  push:
    branches:
      - master
      - stable
      - actions*
      - docs
      - fix_*
    tags:
      - v*

jobs:
  build_sdist:
    name: Build Source Distribution (sdist)
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/docs') != true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Make sure submodules are updated
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive --force
          cd vcpkg
          git fetch --all --unshallow || true
          cd ..

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build tools
        run: pip install build check-manifest twine

      - name: Build sdist
        run: |
          echo "EGTTOOLS_EXTRA_CMAKE_ARGS='-DUSE_OPENMP=OFF'" >> $GITHUB_ENV
          python -m build --sdist --outdir wheelhouse

      - name: Check manifest
        run: python -m check_manifest --verbose

      - name: Install from sdist
        run: pip install wheelhouse/*.tar.gz

      - name: Validate sdist metadata
        run: python -m twine check wheelhouse/*

      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: wheelhouse/*.tar.gz

  build_wheels:
    name: Build Wheels for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: manylinux_x86_64
            manylinux_image: manylinux2014
          - os: windows-latest
            platform: win_amd64
          - os: macos-13
            platform: macosx_x86_64
          - os: macos-14
            platform: macosx_arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Make sure submodules are updated
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive --force
          cd vcpkg
          git fetch --all --unshallow || true
          cd ..

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install latest CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: 'latest'

      - name: Install required system packages (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y autoconf automake autoconf-archive

      - name: Install required system packages (macOS)
        if: runner.os == 'macOS'
        run: brew install autoconf automake autoconf-archive openblas libomp

      - name: Setup vcpkg cache
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ./vcpkg_installed
            ./vcpkg/buildtrees
            ./vcpkg/downloads
            ./vcpkg/packages
          key: ${{ runner.os }}-vcpkg-${{ matrix.platform }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-${{ matrix.platform }}-
            ${{ runner.os }}-vcpkg-

      - name: Bootstrap vcpkg
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            ./vcpkg/bootstrap-vcpkg.bat
          else
            ./vcpkg/bootstrap-vcpkg.sh
          fi

      - name: Install dependencies with vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: ./vcpkg/vcpkg install --x-binarycaching

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0
        env:
          CIBW_BUILD: "cp39-${{ matrix.platform }} cp310-${{ matrix.platform }} cp311-${{ matrix.platform }} cp312-${{ matrix.platform }}"
          CIBW_ARCHS: all
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_ENVIRONMENT_LINUX: VCPKG_PATH=$(pwd) EGTTOOLS_EXTRA_CMAKE_ARGS='-DUSE_OPENMP=OFF'
          CIBW_ENVIRONMENT_MACOS: VCPKG_PATH=$(pwd) EGTTOOLS_EXTRA_CMAKE_ARGS='-DUSE_OPENMP=OFF' MACOSX_DEPLOYMENT_TARGET=11.0
          CIBW_ENVIRONMENT_WINDOWS: VCPKG_PATH=$(pwd) EGTTOOLS_EXTRA_CMAKE_ARGS='-DUSE_OPENMP=OFF'
          CIBW_CONFIG_SETTINGS_WINDOWS: "setup-args=--vsenv"

      - name: Upload wheels artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

      - name: Setup tmate session (for debugging)
        uses: mxschmitt/action-tmate@v3
        if: ${{ failure() && github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
        with:
          limit-access-to-actor: true

  trigger_rtd:
    name: Trigger ReadTheDocs build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/') && !startsWith(github.ref, 'refs/heads/actions')
    needs: [build_wheels]

    steps:
      - name: Trigger ReadTheDocs webhook
        run: |
          branch_name="${GITHUB_REF#refs/heads/}"
          curl -X POST \
            -d "branches=${branch_name}" \
            -d "token=${{ secrets.READTHEDOCS_WEBHOOK_TOKEN }}" \
            https://readthedocs.org/api/v2/webhook/egttools/180432/

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build_sdist, build_wheels]

    steps:
      - name: Download sdist artifact
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: wheelhouse

      - name: Download wheels artifact
        uses: actions/download-artifact@v4
        with:
          name: wheels
          path: wheelhouse

      - name: Get release version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Upload release assets
        uses: ncipollo/release-action@v1.14.0
        with:
          name: Release ${{ steps.get_version.outputs.version }}
          draft: true
          artifacts: wheelhouse/*
          token: ${{ secrets.GITHUB_TOKEN }}
