name: Wheels

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
      - develop
      - docs
    tags:
      - v*
#  release:
#    types:
#      - published

env:
  CIBW_TEST_COMMAND: pytest


jobs:
  build_sdist:
    name: Build source distribution (sdist)
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/docs') != true
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.8

      - name: Install system dependencies macOS
        if: runner.os == 'macOS'
        run: |
          brew install libomp
          echo "LIBOMP=$(brew --prefix libomp)" >> $GITHUB_ENV
          brew install eigen
          echo "EIGEN=$(brew --prefix eigen)" >> $GITHUB_ENV
          brew install gfortran
          echo "GFORTRAN=$(brew --prefix gfortran)" >> $GITHUB_ENV
      - name: Install system dependencies Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libomp-dev
          sudo apt-get install libeigen3-dev
          echo "Eigen3_DIR='/usr/include/eigen3'" >> $GITHUB_ENV

      - name: Install requirements
        run: |
          pip install --user check-manifest twine

      - name: Run check-manifest
        run: |
          python -m check_manifest

      - name: Build sdist
        run: |
          python -m build --sdist --outdir wheelhouse

      - name: Install from sdist
        run: |
          pip install --user wheelhouse/*.tar.gz

      - name: Check sdist metadata
        run: |
          python -m twine check wheelhouse/*

      - name: Upload sdist
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.tar.gz


  build_wheels:
    name: Wheels • ${{ matrix.cibw-arch }} • Python ${{ matrix.python }}${{ matrix.name-extra }}
    runs-on: ${{ matrix.runs-on }}

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        include:
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_x86_64
            python: 3.8
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_x86_64
            python: 3.9
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_i686
            python: 3.8
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_i686
            python: 3.9
          - runs-on: macos-latest
            cibw-arch: macosx_x86_64
            python: 3.8
          - runs-on: macos-latest
            cibw-arch: macosx_x86_64
            python: 3.9
          - runs-on: macos-10.15
            cibw-arch: universal2
            python: 3.9
          - runs-on: windows-latest
            cibw-arch: win_amd64
            python: 3.9
          - runs-on: windows-latest
            cibw-arch: win32
            python-arch: x86
            python: 3.9
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
          architecture: ${{ matrix.python-arch }}

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.8

      - name: Build and test wheels
        env:
          CIBW_BUILD_FRONTEND: "build"
          CIBW_BUILD: "cp38-${{ matrix.cibw-arch }}"
          CIBW_ENVIRONMENT: CMAKE_BUILD_PARALLEL_LEVEL=2
                            CMAKE_OSX_ARCHITECTURES=${{ matrix.cibw-arch == 'macosx_x86_64' && 'x86_64' || matrix.cibw-arch == 'macosx_arm64' && 'arm64' || matrix.cibw-arch == 'macosx_universal2' && '"arm64;x86_64"' || '' }}
                            BUILD_ARCH=${{ matrix.cibw-arch }}
                            CMAKE_ARCH="${{ matrix.cibw-arch == 'win32' && '-A Win32' || '' }}"
          CIBW_ARCHS_MACOS: "x86_64"
#          CIBW_ARCHS_WINDOWS: "AMD64 x86"
          CIBW_BEFORE_ALL_LINUX: bash build_tools/github/download_eigen3.sh
          CIBW_BEFORE_ALL_WINDOWS: bash build_tools/github/download_eigen3_windows.sh
          CIBW_TEST_SKIP: "*_arm64 *_universal2:arm64"
          CIBW_TEST_COMMAND_MACOS: "echo installed wheel"
          CIBW_TEST_COMMAND_WINDOWS: "echo installed wheel"
          CIBW_TEST_COMMAND_LINUX: "echo installed wheel"
          CIBW_BUILD_VERBOSITY: 2
        run: bash build_tools/github/build_wheels.sh

      - name: Check built wheels
        if: startsWith(github.ref, 'refs/heads/docs') != true || matrix.platform_id == 'manylinux_x86_64'
        run: |
          twine check wheelhouse/*

      - name: Upload wheels
        if: startsWith(github.ref, 'refs/heads/docs') != true
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

      - name: Upload wheel for ReadTheDocs
        if: runner.os == 'Linux' && matrix.cibw-arch == 'manylinux_x86_64' && startsWith(github.ref, 'refs/heads/') && !startsWith(github.ref, 'refs/heads/actions')
        uses: actions/upload-artifact@v2
        with:
          name: rtd-wheelconda
          path: wheelhouse/egttools-*-cp38-cp38-manylinux*_x86_64.whl
          if-no-files-found: error

  trigger_rtd:
    name: Trigger ReadTheDocs build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/') && !startsWith(github.ref, 'refs/heads/actions')
    needs: [ build_wheels ]

    steps:
      - name: Get branch name
        id: get_branch
        run: |
          echo "::set-output name=branch::${GITHUB_REF##refs/heads/}"
      - name: Trigger ReadTheDocs webhook
        run: |
          curl -X POST -d "branches=${{ steps.get_branch.outputs.branch }}" -d "token=${{ secrets.READTHEDOCS_WEBHOOK_TOKEN }}" https://readthedocs.org/api/v2/webhook/egttools/180432/

  create_release:
    name: Create release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build_sdist, build_wheels]

    steps:
      - name: Collect sdist and wheels
        uses: actions/download-artifact@v2
        with:
          name: wheels
          path: wheelhouse

      - name: Get release name
        id: get_version
        run: |
          echo "::set-output name=version::${GITHUB_REF##refs/tags/v}"
      - name: Upload sdist and wheels to release
        uses: ncipollo/release-action@v1.8.10
        with:
          name: ${{ steps.get_version.outputs.version }}
          draft: true
          artifacts: wheelhouse/*
          token: ${{ secrets.GITHUB_TOKEN }}