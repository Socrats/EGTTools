name: Wheels

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled'
        required: false
        default: false
  pull_request:
  push:
    branches:
      - master
      - stable
      - actions*
      - docs
    tags:
      - v*

jobs:
  build_sdist:
    name: Build source distribution (sdist)
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/docs') != true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Make sure submodules are updated
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive --force
          cd vcpkg
          git fetch --all --unshallow || true
          cd ..

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: 'latest'

      - name: Install system packages (OpenMP, BLAS/LAPACK)
        run: bash build_tools/github/install_blas_openmp.sh

      - name: Setup cache for vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ./vcpkg_installed
            ./vcpkg/buildtrees
            ./vcpkg/downloads
            ./vcpkg/packages
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Bootstrap vcpkg
        run: |
          ./vcpkg/bootstrap-vcpkg.sh

      - name: Install dependencies with vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          ./vcpkg/vcpkg install --x-binarycaching

      - name: Set VCPKG_PATH environment variable
        run: |
          echo "VCPKG_PATH=$(pwd)" >> $GITHUB_ENV

      - name: Install Python requirements
        run: |
          pip install --user check-manifest twine

      - name: Build sdist
        run: |
          echo "EGTTOOLS_EXTRA_CMAKE_ARGS='-DUSE_OPENMP=OFF'" >> $GITHUB_ENV
          python -m build --sdist --outdir wheelhouse

      - name: Run check-manifest
        run: |
          python -m check_manifest --verbose

      - name: Install from sdist
        run: |
          pip install --user wheelhouse/*.tar.gz

      - name: Check sdist metadata
        run: |
          python -m twine check wheelhouse/*

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: wheelhouse/*.tar.gz

  build_wheels:
    name: Build wheel for ${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform_id: win_amd64
            openmp_enabled: "ON"

          - os: windows-latest
            platform_id: win_arm64
            openmp_enabled: "ON"

          - os: ubuntu-latest
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014
            openmp_enabled: "ON"

          - os: macos-13
            platform_id: macosx_x86_64
            macosx_deployment_target: "13.0"
            openmp_enabled: "ON"
            skip_vcpkg: "OFF"

          - os: macos-14
            platform_id: macosx_arm64
            macosx_deployment_target: "14.0"
            openmp_enabled: "ON"
            skip_vcpkg: "OFF"


    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Make sure submodules are updated
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive --force
          cd vcpkg
          git fetch --all --unshallow || true
          cd ..

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: 'latest'

      - name: Set MACOSX_DEPLOYMENT_TARGET globally
        if: runner.os == 'macOS'
        run: |
          echo "Setting MACOSX_DEPLOYMENT_TARGET=${{ matrix.macosx_deployment_target }}"
          echo "MACOSX_DEPLOYMENT_TARGET=${{ matrix.macosx_deployment_target }}" >> $GITHUB_ENV
          echo "EGTTOOLS_EXTRA_CMAKE_ARGS='-DUSE_OPENMP=${{ matrix.openmp_enabled }} -DSKIP_VCPKG=${{ matrix.skip_vcpkg }}'" >> $GITHUB_ENV

      - name: Check MACOSX_DEPLOYMENT_TARGET inside Python
        if: runner.os == 'macOS'
        run: |
          python3 -c "import sysconfig; print('Python sees MACOSX_DEPLOYMENT_TARGET =', sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET'))"

      - name: Setup cache for vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ./vcpkg_installed
            ./vcpkg/buildtrees
            ./vcpkg/downloads
            ./vcpkg/packages
          key: ${{ runner.os }}-vcpkg-${{ matrix.platform_id }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-${{ matrix.platform_id }}-
            ${{ runner.os }}-vcpkg-

      - name: Bootstrap vcpkg
        if: runner.os == 'Linux' || (runner.os == 'macOS' && matrix.platform_id != 'macosx_universal2')
        run: |
          ./vcpkg/bootstrap-vcpkg.sh
          echo "VCPKG_PATH=$(pwd)" >> $GITHUB_ENV

      - name: Bootstrap vcpkg (Windows)
        if: runner.os == 'Windows'
        run: |
          ./vcpkg/bootstrap-vcpkg.bat

      - name: Install dependencies with vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          ./vcpkg/vcpkg install --x-binarycaching

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.1.4
        env:
          CIBW_ARCHS: all
          CIBW_ENVIRONMENT_LINUX: VCPKG_PATH=$(pwd) EGTTOOLS_EXTRA_CMAKE_ARGS="-DUSE_OPENMP=ON"
          CIBW_ENVIRONMENT_MACOS: |
            SKIP_VCPKG=${{ matrix.skip_vcpkg }} EGTTOOLS_EXTRA_CMAKE_ARGS="-DUSE_OPENMP=${{ matrix.openmp_enabled }}" MACOSX_DEPLOYMENT_TARGET=${{ matrix.macosx_deployment_target }}
          CIBW_ENVIRONMENT_WINDOWS: VCPKG_PATH=$(pwd) EGTTOOLS_EXTRA_CMAKE_ARGS="-DUSE_OPENMP=ON"
          CIBW_BUILD: "cp310-${{ matrix.platform_id }} cp311-${{ matrix.platform_id }} cp312-${{ matrix.platform_id }}"
          CIBW_BEFORE_ALL_LINUX: bash {package}/build_tools/github/install_blas_openmp.sh
          CIBW_BEFORE_ALL_MACOS: bash {package}/build_tools/github/install_blas_openmp.sh
          # Optionally for Windows too, if needed
          # CIBW_BEFORE_ALL_WINDOWS: bash {package}/build_tools/github/install_blas_openmp.sh
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_CONFIG_SETTINGS_WINDOWS: "setup-args=--vsenv"
          CIBW_ENVIRONMENT_PASS_LINUX: RUNNER_OS
        with:
          package-dir: .
          output-dir: wheelhouse
          config-file: "{package}/pyproject.toml"


      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ matrix.platform }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl


      - name: Upload wheel for ReadTheDocs
        if: runner.os == 'Linux' && matrix.platform_id == 'manylinux_x86_64' && startsWith(github.ref, 'refs/heads/') && !startsWith(github.ref, 'refs/heads/actions')
        uses: actions/upload-artifact@v4
        with:
          name: rtd-wheel
          path: wheelhouse/egttools-*-cp310-*-manylinux*_x86_64*.whl
          if-no-files-found: error

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ failure() && github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
        with:
          limit-access-to-actor: true

  trigger_rtd:
    name: Trigger ReadTheDocs build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/') && !startsWith(github.ref, 'refs/heads/actions')
    needs: [ build_wheels ]

    steps:
      - name: Get branch name
        id: get_branch
        run: |
          echo "::set-output name=branch::${GITHUB_REF##refs/heads/}"

      - name: Trigger ReadTheDocs webhook
        run: |
          curl -X POST -d "branches=${{ steps.get_branch.outputs.branch }}" -d "token=${{ secrets.READTHEDOCS_WEBHOOK_TOKEN }}" https://readthedocs.org/api/v2/webhook/egttools/180432/

  create_release:
    name: Create release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [ build_sdist, build_wheels ]

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_artifacts

      - name: Consolidate wheels and sdist
        run: |
          mkdir -p wheelhouse
          find all_artifacts -name '*.whl' -exec cp {} wheelhouse/ \;
          find all_artifacts -name '*.tar.gz' -exec cp {} wheelhouse/ \;


      - name: Get release name
        id: get_version
        run: |
          echo "::set-output name=version::${GITHUB_REF##refs/tags/v}"

      - name: Upload sdist and wheels to release
        uses: ncipollo/release-action@v1.18.0
        with:
          name: ${{ steps.get_version.outputs.version }}
          draft: true
          artifacts: wheelhouse/*
          token: ${{ secrets.GITHUB_TOKEN }}
