name: Build Docs

on:
  workflow_run:
    workflows: ["Wheels"]
    types:
      - completed
  workflow_dispatch:

jobs:
  build-docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Determine triggering event
        id: context
        run: echo "EVENT_NAME=${{ github.event_name }}" >> $GITHUB_ENV

      - name: Get latest successful Wheels run ID (manual only)
        if: env.EVENT_NAME == 'workflow_dispatch'
        id: get_manual_run_id
        run: |
          run_id=$(gh run list --workflow="Wheels" --branch=main --json databaseId,status,conclusion \
            --jq '.[] | select(.status=="completed" and .conclusion=="success") | .databaseId' | head -n 1)
          echo "WHEEL_RUN_ID=$run_id" >> $GITHUB_ENV

      - name: Get triggering Wheels run ID (workflow_run)
        if: env.EVENT_NAME == 'workflow_run'
        id: get_triggered_run_id
        run: |
          # Uses the SHA of the triggering workflow_run to find the matching Wheels run
          sha="${{ github.event.workflow_run.head_sha }}"
          run_id=$(gh run list --workflow="Wheels" --branch=main --json databaseId,headSha,status,conclusion \
            --jq ".[] | select(.headSha==\"$sha\" and .status==\"completed\" and .conclusion==\"success\") | .databaseId" | head -n 1)
          echo "WHEEL_RUN_ID=$run_id" >> $GITHUB_ENV

      - name: Download RTD wheel artifact from matched Wheels run
        run: |
          echo "Downloading rtd-wheel artifact from run ID $WHEEL_RUN_ID"
          gh run download "$WHEEL_RUN_ID" -n rtd-wheel -D ./wheelhouse

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install RTD wheel
        run: pip install ./wheelhouse/*.whl

      - name: Install pandoc
        run: sudo apt-get update && sudo apt-get install -y pandoc

      - name: Install documentation dependencies
        run: |
          pip install pandoc
          pip install -r docs/requirements.txt

      - name: Build docs
        run: |
          sphinx-build -b html -n --keep-going docs docs/build/html

      - name: Upload docs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: html-docs
          path: docs/build/html

  deploy-docs:
    name: Deploy to GitHub Pages
    needs: build-docs
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_run'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download built HTML docs
        uses: actions/download-artifact@v4
        with:
          name: html-docs
          path: public

      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
          force_orphan: true

