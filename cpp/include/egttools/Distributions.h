/** Copyright (c) 2019-2021  Elias Fernandez
  *
  * This file is part of EGTtools.
  *
  * EGTtools is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * EGTtools is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with EGTtools.  If not, see <http://www.gnu.org/licenses/>
*/

//
// Adapted from https://github.com/Svalorzen/AI-Toolbox/
//
#pragma once
#ifndef EGTTOOLS_DISTRIBUTIONS_H
#define EGTTOOLS_DISTRIBUTIONS_H

#include <egttools/Types.h>

#include <algorithm>
#include <egttools/math.hpp>
#include <random>
#include <stdexcept>

#if (HAS_BOOST)
#include <boost/multiprecision/cpp_dec_float.hpp>
#include <boost/multiprecision/cpp_int.hpp>

#define int_type_ boost::multiprecision::cpp_int
#define uint_type_ boost::multiprecision::uint128_t
#define float_type_ boost::multiprecision::cpp_dec_float_100
#define binomial_coeff_ binomial_precision
#define CONVERT_TO_(object, type) object.convert_to<type>()
#else
#define int_type_ int64_t
#define uint_type_ size_t
#define float_type_ double
#define binomial_coeff_ egttools::binomialCoeff<double, size_t>
#define CONVERT_TO_(object, type) static_cast<type>(object)
#endif

namespace egttools {
    /**
     * @brief This function samples an index from a probability vector.
     *
     * @tparam T Type of vector container
     * @tparam G Type of random number generator
     * @param d vector size
     * @param in probability vector
     * @param generator random number generator
     * @return An index in range [0, d-1].
     */
    template<typename T, typename G>
    size_t choice(const size_t d, const T &in, G &generator) {
        std::uniform_real_distribution<double> probabilityDistribution(0.0, 1.0);
        double p = probabilityDistribution(generator);
        double container;

        for (size_t i = 0; i < d; ++i) {
            container = in[i];
            if (container > p) return i;
            p -= container;
        }
        return d - 1;
    }

    /**
     * @brief This function samples an index from a probability vector.
     *
     * @tparam T Type of vector container
     * @tparam G Type of random number generator
     * @param d vector size
     * @param in probability vector
     * @param dist uniform distribution [0, 1)
     * @param generator random number generator
     * @return An index in range [0, d-1].
     */
    template<typename T, typename G>
    size_t choice(const size_t d, const T &in, std::uniform_real_distribution<double> &dist, G &generator) {
        double p = dist(generator);
        double container;

        for (size_t i = 0; i < d; ++i) {
            container = in[i];
            if (container > p) return i;
            p -= container;
        }
        return d - 1;
    }

    /**
     * @brief This function samples and index from a sparse probability vector.
     *
     * This function randomly samples an index between 0 and d, given a vector
     * containing the probabilities of sampling each of the indexes.
     *
     * @tparam G
     * @param d
     * @param in
     * @param generator
     * @return
     */
    template<typename G>
    size_t choice(const size_t d, const SparseMatrix2D::ConstRowXpr &in, G &generator) {
        std::uniform_real_distribution<double> probabilityDistribution(0.0, 1.0);
        double p = probabilityDistribution(generator);

        for (SparseMatrix2D::ConstRowXpr::InnerIterator i(in, 0);; ++i) {
            if (i.value() > p) return i.col();
            p -= i.value();
        }
        return d - 1;
    }

    static std::vector ln_factorials = {
        0.000000000000000000000000000000000000000000000000e+0L, // 0!
        0.000000000000000000000000000000000000000000000000e+0L, // 1!
        6.931471805599453094172321214581765680755001343603e-1L, // 2!
        1.791759469228055000812477358380702272722990692183e+0L, // 3!
        3.178053830347945619646941601297055408873990960904e+0L, // 4!
        4.787491742782045994247700934523243048399592315172e+0L, // 5!
        6.579251212010100995060178292903945321122583007355e+0L, // 6!
        8.525161361065414300165531036347125050759667736937e+0L, // 7!
        1.0604602902745250228417227400721654754986168140018e+1L, // 8!
        1.2801827480081469611207717874566706164281149255663e+1L, // 9!
        1.5104412573075515295225709329251070371882250744292e+1L, // 10!
        1.7502307845873885839287652907216199671703957598229e+1L, // 11!
        1.9987214495661886149517362387055078512502448424773e+1L, // 12!
        2.2552163853123422885570849828620397117307716369533e+1L, // 13!
        2.5191221182738681500093434693521753415020301233475e+1L, // 14!
        2.7899271383840891566089439263670466759193393145566e+1L, // 15!
        3.0671860106080672803758367749503173031495393683007e+1L, // 16!
        3.3505073450136888884007902367376299567083596695593e+1L, // 17!
        3.6395445208033053576215624962679527544454077945599e+1L, // 18!
        3.9339884187199494036224652394567381081691457206898e+1L, // 19!
        4.2335616460753485029659875970709921857368058829887e+1L, // 20!
        4.5380138898476908026160473951075627291652634117291e+1L, // 21!
        4.8471181351835223879639649650498933159549841105589e+1L, // 22!
        5.1606675567764373570446402482309129277992221420430e+1L, // 23!
        5.4784729398112319190093344083606184686866212381333e+1L, // 24!
        5.8003605222980519939294862750058559965917415089870e+1L, // 25!
        6.1261701761002001984765582313082055138798183168991e+1L, // 26!
        6.4557538627006331058951318023849632252740654842459e+1L, // 27!
        6.7889743137181534982891135010209165118528739840761e+1L, // 28!
        7.1257038967168009010074407042571076724023252754684e+1L, // 29!
        7.4658236348830164385487643734177966636271844801135e+1L, // 30!
        7.8092223553315310631416808058720323846721783731616e+1L, // 31!
        8.1557959456115037178502968666011206687099284403417e+1L, // 32!
        8.5054467017581517413960157480898861691568481815178e+1L, // 33!
        8.8580827542197678803626924220230164795232184962124e+1L, // 34!
        9.2136175603687092483333036296899532164394871045974e+1L, // 35!
        9.5719694542143202484957991013660936709840852430340e+1L, // 36!
        9.9330612454787426929326086684692383873740930017508e+1L, // 37!
        1.0296819861451381269875234623803841397905380941317e+2L, // 38!
        1.0663176026064345912620107891652625828850656791575e+2L, // 39!
        1.1032063971475739542905353461412697563225866967310e+2L, // 40!
        1.1403421178146170323292029798716438322063508014250e+2L, // 41!
        1.1777188139974507153883812808898826522299515556426e+2L, // 42!
        1.2153308151543863396231097060233411225855429174914e+2L, // 43!
        1.2531727114935689512520737842321559469452699887180e+2L, // 44!
        1.2912393363912721488259862823028683374334758134172e+2L, // 45!
        1.3295257503561630988282261318355520642986546179092e+2L, // 46!
        1.3680272263732636846964356385332738013876151229294e+2L, // 47!
        1.4067392364823425939870773757608261211571100338820e+2L, // 48!
        1.4456574394634488600891844306296897157498517284737e+2L, // 49!
        1.4847776695177303206753719385087952342211187569026e+2L, // 50!
        1.5240959258449735783918197370567517566234756926067e+2L, // 51!
        1.5636083630307878519406992539015684740330383747415e+2L, // 52!
        1.6033112821663090702821439452918590517366381522706e+2L, // 53!
        1.6432011226319518141181736236141165885568178703489e+2L, // 54!
        1.6832744544842765233048006527260297579502909524310e+2L, // 55!
        1.7235279713916280156383711438042068522889268037576e+2L, // 56!
        1.7639584840699735171524138704923106447077755019488e+2L, // 57!
        1.8045629141754377105184189120305115264434756324316e+2L, // 58!
        1.8453382886144949050245794157677085026841091003250e+2L, // 59!
        1.8862817342367159118728841038983591674873500221331e+2L, // 60!
        1.9273904728784490243603979949326153149505068395639e+2L, // 61!
        1.9686618167288999399138619593926206527357612302123e+2L, // 62!
        2.0100931639928152667928203915655029641250818886646e+2L, // 63!
        2.0516819948264119853578543188529935582096118967262e+2L, // 64!
        2.0934258675253683564643967866009086206529205897165e+2L, // 65!
        2.1353224149456326119131409959643669363783675651777e+2L, // 66!
        2.1773693411395422725098417159280041638840368942099e+2L, // 67!
        2.2195644181913033395006817045358989606014289270230e+2L, // 68!
        2.2619054832372759333227016852232261788323276357496e+2L, // 69!
        2.3043904356577695232139351272045016182047094979317e+2L, // 70!
        2.3470172344281826774272296725296319591723052631988e+2L, // 71!
        2.3897838956183432305376515409118277703075200783861e+2L, // 72!
        2.4326884900298271418285726294862131960165676068348e+2L, // 73!
        2.4757291409618688393664259074111094333363233840501e+2L, // 74!
        2.5189040220972319437723935464448584431733103167137e+2L, // 75!
        2.5622113555000952545608284631929005099071941120139e+2L, // 76!
        2.6056494097186320930525014264069836002017820278490e+2L, // 77!
        2.6492164979855280104211610744064438089770646142185e+2L, // 78!
        2.6929109765101982253628905298212579181988000264627e+2L, // 79!
        2.7367312428569370414855874080118468573170760453798e+2L, // 80!
        2.7806757344036614291413972174887478855029756676927e+2L, // 81!
        2.8247429268763039602742371724337037270674947737303e+2L, // 82!
        2.8689313329542699395089918946666174315977879042969e+2L, // 83!
        2.9132395009427030756623425168994380173021436598582e+2L, // 84!
        2.9576660135076062402108454564104311590532817035267e+2L, // 85!
        3.0022094864701413175397462027584713950896280667191e+2L, // 86!
        3.0468685676566871547255313754513157681910481014366e+2L, // 87!
        3.0916419358014692194486677748747123582315301740068e+2L, // 88!
        3.1365282994987906178318459302814108504255767778781e+2L, // 89!
        3.1815263962020932684999307495667050065945376039209e+2L, // 90!
        3.2266349912672617689115191514167899899389611306643e+2L, // 91!
        3.2718528770377521720079313221640554824848949364999e+2L, // 92!
        3.3171788719692847313811754177787043116358692313829e+2L, // 93!
        3.3626118197919847703435572456910078144055847377467e+2L, // 94!
        3.4081505887079901786896551133421482261732145439024e+2L, // 95!
        3.4537940706226685410744691717842823116234644561986e+2L, // 96!
        3.4995411804077023692956363880013219287615536052252e+2L, // 97!
        3.5453908551944080884919157640847672890350503011605e+2L, // 98!
        3.5913420536957539877604401046028690961262171808563e+2L, // 99!
        3.6373937555556349014407999336965563802782392106289e+2L, // 100!
        3.6835449607240474959496419163656862718471480365008e+2L, // 101!
        3.7297946888568902067602620361282245599302599735485e+2L, // 102!
        3.7761419787391865644679480592787589681365425846322e+2L, // 103!
        3.8225858877306002911109998973381574512268602681107e+2L, // 104!
        3.8691254912321755248220134704740763819649620345274e+2L, // 105!
        3.9157598821732961962576304830789487253493168134001e+2L, // 106!
        3.9624881705179152579906744712491814953649482761614e+2L, // 107!
        4.0093094827891574549208764707860207978658829955833e+2L, // 108!
        4.0562229616114488919246496353081128143764864844183e+2L, // 109!
        4.1032277652693730542054489856346077494507145678440e+2L, // 110!
        4.1503230672824963955630823947141474781361902492939e+2L, // 111!
        4.1975080559954473409908252070069063381555811019641e+2L, // 112!
        4.2447819341825707466766465219430665548758744058512e+2L, // 113!
        4.2921439186665157012848615698457521129754781053860e+2L, // 114!
        4.3395932399501482019389366914961159505551579220771e+2L, // 115!
        4.3871291418612118483991140542488985979716130539035e+2L, // 116!
        4.4347508812091894095875538334030022981126155445076e+2L, // 117!
        4.4824577274538460571878866583547810400340040137445e+2L, // 118!
        4.5302489623849613510414355319679441026862568911661e+2L, // 119!
        4.5781238798127818109839125413131765331702528143179e+2L, // 120!
        4.6260817852687492218651514128724791191666869513966e+2L, // 121!
        4.6741219957160817874468376251213170323105987701710e+2L, // 122!
        4.7222438392698059623994577112209163652408377804432e+2L, // 123!
        4.7704466549258563310470939968955034687068471724353e+2L, // 124!
        4.8187297922988793422851167768922890978926152130633e+2L, // 125!
        4.8670926113683941222582475302797531749626908728592e+2L, // 126!
        4.9155344822329800349887219383569160989114299640985e+2L, // 127!
        4.9640547848721762066479281868589884586767149735037e+2L, // 128!
        5.0126529089157929277966090643616721860787812409307e+2L, // 129!
        5.0613282534203487519973238533241690142028449352646e+2L, // 130!
        5.1100802266523602674388180934358642731339240353110e+2L, // 131!
        5.1589082458782239759817346240139043545401260121158e+2L, // 132!
        5.2078117371604415136328784257672146872088706520246e+2L, // 133!
        5.2567901351599506273237514669454336803952949824004e+2L, // 134!
        5.3058428829443349218116164173853713279299757126778e+2L, // 135!
        5.3549694318016954418966287272078478903281227468345e+2L, // 136!
        5.4041692410599766910497806284876465442337540985749e+2L, // 137!
        5.4534417779115487379659729303895555281454078086452e+2L, // 138!
        5.5027865172428556555378607795783109659698337752487e+2L, // 139!
        5.5522029414689486985232665427741681710229706387744e+2L, // 140!
        5.6016905403727303813054285018411151651584060493728e+2L, // 141!
        5.6512488109487429886128953683808272718067568159836e+2L, // 142!
        5.7008772572513420614140496785761317508530265639705e+2L, // 143!
        5.7505753902471020676186438681729093276689963805014e+2L, // 144!
        5.8003427276713078116364841818287903201191975231833e+2L, // 145!
        5.8501787938883911760215775916177575115090000529756e+2L, // 146!
        5.9000831197561785390376370988558463631482166531455e+2L, // 147!
        5.9500552424938196896696626979953243661487274317044e+2L, // 148!
        6.0000947055532742810795869807463655710272882794163e+2L, // 149!
        6.0502010584942368385797269409946963465450302134235e+2L, // 150!
        6.1003738568623860818676893039895411094476075773493e+2L, // 151!
        6.1506126620708488457502965419521649418622463739931e+2L, // 152!
        6.2009170412847732003806967928693467213110782152754e+2L, // 153!
        6.2512865673089094919665420772980115772864211324542e+2L, // 154!
        6.3017208184781019581718413138756970257861765353017e+2L, // 155!
        6.3522193785505973286346732830897390002422141230147e+2L, // 156!
        6.4027818366040804092089177354537737527296365593234e+2L, // 157!
        6.4534077869343500772448195120831696276321269729112e+2L, // 158!
        6.5040968289565523925002166558426854623822016560185e+2L, // 159!
        6.5548485671088906617170858552478561671812326762792e+2L, // 160!
        6.6056626107587352916762069110003899256620273267235e+2L, // 161!
        6.6565385741110591324261890416918727195286819503800e+2L, // 162!
        6.7074760761191267557668383653530802182950008206073e+2L, // 163!
        6.7584747403973687399938506415126178255402749279885e+2L, // 164!
        6.8095341951363745460944301229937562519802229156488e+2L, // 165!
        6.8606540730199399784233571664412517221912710475590e+2L, // 166!
        6.9118340111441075294959546742086995158492442735851e+2L, // 167!
        6.9630736509381401187434776176561018672343550304900e+2L, // 168!
        7.0143726380873708534645473664874082393304603893852e+2L, // 169!
        7.0657306224578734711072226272129831467623534343973e+2L, // 170!
        7.1171472580229000695352178062703121962276770381668e+2L, // 171!
        7.1686222027910345999582908738329341979447784027028e+2L, // 172!
        7.2201551187360123894276258777173441126366369317799e+2L, // 173!
        7.2717456717281576797075833716247702514188119678410e+2L, // 174!
        7.3233935314673928202506520857237258015056948422222e+2L, // 175!
        7.3750983714177743380679608063617041572269319161359e+2L, // 176!
        7.4268598687435126294880737624681263905140402896075e+2L, // 177!
        7.4786777042464334809654242390894066483888418948224e+2L, // 178!
        7.5305515623048410309272022833896206701448712290042e+2L, // 179!
        7.5824811308137431346894594238894965919945870563906e+2L, // 180!
        7.6344661011264013921578502942758266812669903808056e+2L, // 181!
        7.6865061679971693456636110173404934302921689088926e+2L, // 182!
        7.7386010295255835550650773607439748348018006319017e+2L, // 183!
        7.7907503871016734112556618527058220930284894390809e+2L, // 184!
        7.8429539453524566594453504027483984410627462284952e+2L, // 185!
        7.8952114120895886719127668195776290358944755247219e+2L, // 186!
        7.9475224982581345381558816015360115942485746233871e+2L, // 187!
        7.9998869178864340302124357506628968626990451310945e+2L, // 188!
        8.0523043880370304540053466352050044311348406951250e+2L, // 189!
        8.1047746287586353154456168240707266085832255026243e+2L, // 190!
        8.1572973630391016141741163235927502800493099173890e+2L, // 191!
        8.2098723167593794296531027032494661311803148310288e+2L, // 192!
        8.2624992186484282851716520137832967188222155059546e+2L, // 193!
        8.3151778002390615664869915512149181016410596563248e+2L, // 194!
        8.3679077958246990345074864713320584211308432548933e+2L, // 195!
        8.4206889424170042067979381686300855470850949521721e+2L, // 196!
        8.4735209797043840918657361419217138568351813927957e+2L, // 197!
        8.5264036500113294442284328036543974296071032738352e+2L, // 198!
        8.5793366982585743681825340165730828016260143266408e+2L, // 199!
        8.6323198719240547349570661668813518514587913577570e+2L, // 200!
        8.6853529210046454924677193392142143360109355923675e+2L, // 201!
        8.7384355979786575400707336430979259932605994195831e+2L, // 202!
        8.7915676577690754133936198908559769066119153960181e+2L, // 203!
        8.8447488577075175772984123318330969603757823344094e+2L, // 204!
        8.8979789574989016590830875588957329126548024526461e+2L, // 205!
        8.9512577191867974698849459032608490865418400650734e+2L, // 206!
        9.0045849071194511606209183363174015618192136793782e+2L, // 207!
        9.0579602879164643403581424955913818105902863642002e+2L, // 208!
        9.1113836304361124503988522056899116389608772253526e+2L, // 209!
        9.1648547057432871372040381000404123353797339931129e+2L, // 210!
        9.2183732870780478021614576626949551365601455748488e+2L, // 211!
        9.2719391498247679266912469965144092456252553550651e+2L, // 212!
        9.3255520714818621778184939942087648436393260259104e+2L, // 213!
        9.3792118316320806926457103035935793793357124900153e+2L, // 214!
        9.4329182119133573206264463220592997260865598654068e+2L, // 215!
        9.4866709959901989706508206428107207942682495861723e+2L, // 216!
        9.5404699695256035661611658134905761636691198227729e+2L, // 217!
        9.5943149201534944562591112992272499458604783129516e+2L, // 218!
        9.6482056374516594644639848401708606286160007469785e+2L, // 219!
        9.7021419129151830798389565117119373293709838317478e+2L, // 220!
        9.7561235399303606080019867323063217807749185413212e+2L, // 221!
        9.8101503137490834024537924626004432751411492241148e+2L, // 222!
        9.8642220314636845900401535146976746754081355068595e+2L, // 223!
        9.9183384919822349885620686482050153011082813608733e+2L, // 224!
        9.9724994960042791898819887396079895679917431991151e+2L, // 225!
        1.0026704845997002048661982375758731550392791504346e+3L, // 226!
        1.0080954346171816075412116191527066520844340503535e+3L, // 227!
        1.0135247802461360483114503560644333844624699204413e+3L, // 228!
        1.0189585022496902879598915916683659927797083903843e+3L, // 229!
        1.0243965815586134833347163359548605531057518721878e+3L, // 230!
        1.0298389992691352768752788775131913878398581543291e+3L, // 231!
        1.0352857366408015868307138459099278291495791676461e+3L, // 232!
        1.0407367750943672873960160707845967166281681434966e+3L, // 233!
        1.0461920962097249888242772808214652632103438926914e+3L, // 234!
        1.0516516817238691477856989908244636245587655445477e+3L, // 235!
        1.0571155135288947578551495054410996753189798916057e+3L, // 236!
        1.0625835736700298890407176962195036119458009233880e+3L, // 237!
        1.0680558443437013637354898157022780947791017112645e+3L, // 238!
        1.0735323078956328744024529792965400038755395156203e+3L, // 239!
        1.0790129468189748657061179123525214234920146080698e+3L, // 240!
        1.0844977437524655207015843236712322392270318678338e+3L, // 241!
        1.0899866814786222070991254429486206743947507816761e+3L, // 242!
        1.0954797429219627555561016691332333029179882344652e+3L, // 243!
        1.1009769111472559574236875224795752708004549164770e+3L, // 244!
        1.1064781693578006844084989872996878178992546872904e+3L, // 245!
        1.1119835008937330472131782280311059277603540884520e+3L, // 246!
        1.1174928892303610244092407429045590999023967356581e+3L, // 247!
        1.1230063179765260065834216035934759868170731749916e+3L, // 248!
        1.1285237708729907141982923210536898829747499786061e+3L, // 249!
        1.1340452317908529606315118311748266224614022828033e+3L, // 250!
        1.1395706847299847445177304164138348757026816284189e+3L, // 251!
        1.1451001138174961678244607238740394599777646945328e+3L, // 252!
        1.1506335033062236880593294202838147853960287817016e+3L, // 253!
        1.1561708375732422246417940932129892543589781909599e+3L, // 254!
        1.1617121011184006507880396324010110942387394858845e+3L, // 255!
        1.1672572785628802132633774893726765067833434869594e+3L, // 256!
        1.1728063546477754330617292836874377622349582117884e+3L, // 257!
        1.1783593142326970504860146035591643115432403386655e+3L, // 258!
        1.1839161422943965882354880519736389384367775009822e+3L, // 259!
        1.1894768239254121159649767629913467978172593705500e+3L, // 260!
        1.1950413443327348093749505254975537608320488645795e+3L, // 261!
        1.2006096888364959062285171816301814632932322747186e+3L, // 262!
        1.2061818428686736707796031078943865353836177585586e+3L, // 263!
        1.2117577919718199869433119930736487200923134563735e+3L, // 264!
        1.2173375217978062091520572215459039655021990354806e+3L, // 265!
        1.2229210181065879082265888338426931753371489996059e+3L, // 266!
        1.2285082667649881577563018946202855502612011505508e+3L, // 267!
        1.2340992537454990144348064308595656261479190837228e+3L, // 268!
        1.2396939651251008535410263840400608632657901318339e+3L, // 269!
        1.2452923870840992282992301112055128045873337049960e+3L, // 270!
        1.2508945059049789291993269812787186666262392369255e+3L, // 271!
        1.2565003079712749265172454443824244994341294404755e+3L, // 272!
        1.2621097797664598862497995298043555234732192837076e+3L, // 273!
        1.2677229078728479564745319520537935654318579190160e+3L, // 274!
        1.2733396789705145277677954142982110700107308285785e+3L, // 275!
        1.2789600798362316777688318766098601449699716997199e+3L, // 276!
        1.2845840973424190162687012741593847558091347196677e+3L, // 277!
        1.2902117184561096533353072911997184761596528164624e+3L, // 278!
        1.2958429302379310189640269459981058847793977365085e+3L, // 279!
        1.3014777198411002685719847544391497818527869229955e+3L, // 280!
        1.3071160745104340143370913927638429537936068087615e+3L, // 281!
        1.3127579815813721279247248207919958297752258499557e+3L, // 282!
        1.3184034284790153655493708079387909699800262834586e+3L, // 283!
        1.3240524027171765715895347267142203572129368602540e+3L, // 284!
        1.3297048918974452221155397587162569240943473314274e+3L, // 285!
        1.3353608837082650747050724218572455485670498063604e+3L, // 286!
        1.3410203659240246958140445379737261358850633015594e+3L, // 287!
        1.3466833264041606417439211890548620701347357833469e+3L, // 288!
        1.3523497530922730739044202582906083232059121893720e+3L, // 289!
        1.3580196340152535936156215217776545990190078037746e+3L, // 290!
        1.3636929572824250861291334886362810864374642092351e+3L, // 291!
        1.3693697110846933678770600617366359821445199623487e+3L, // 292!
        1.3750498836937104351829999019994484803347497370066e+3L, // 293!
        1.3807334634610491167940230848447155420667468971579e+3L, // 294!
        1.3864204388173889366192398945516614273303358453015e+3L, // 295!
        1.3921107982717129969918596865870674041984624232918e+3L, // 296!
        1.3978045304105156966101073658758001106122266018192e+3L, // 297!
        1.4035016238970211010605170262723624076681581867247e+3L, // 298!
        1.4092020674704117874873772665457379223914058349843e+3L, // 299!
        1.4149058499450679885468084946920291765112555285194e+3L, // 300!
        1.4206129602098168642753866899488182032764517494339e+3L, // 301!
        1.4263233872271917339136001583697608561347849859608e+3L, // 302!
        1.4320371200327011030558796018735963709963233591058e+3L, // 303!
        1.4377541477341073247535575577913169308058627389046e+3L, // 304!
        1.4434744595107147363769097062279687331917040220019e+3L, // 305!
        1.4491980446126671171493669634411450877046627062645e+3L, // 306!
        1.4549248923602543143029654260084275799885084144492e+3L, // 307!
        1.4606549921432278887709671865727522421541182063015e+3L, // 308!
        1.4663883334201256342331310341247282086793939579677e+3L, // 309!
        1.4721249057176048261630781899039549300974449983868e+3L, // 310!
        1.4778646986297840602972741854693876123735649227993e+3L, // 311!
        1.4836077018175935426529746145122499863872441817049e+3L, // 312!
        1.4893539050081336958696533798215071967408172809733e+3L, // 313!
        1.4951032979940419492364950571793688485576350247385e+3L, // 314!
        1.5008558706328675822989916597298832673360926919380e+3L, // 315!
        1.5066116128464544944119990695142810313944172334311e+3L, // 316!
        1.5123705146203317750261988316835796427037948165958e+3L, // 317!
        1.5181325660031119518611557781809894027468777850409e+3L, // 318!
        1.5238977571058967964324009937913164436521940048088e+3L, // 319!
        1.5296660781016905686635051458532916907001726069692e+3L, // 320!
        1.5354375192248205845282047899072374934063832438032e+3L, // 321!
        1.5412120707703649928335341276039490458225382089819e+3L, // 322!
        1.5469897230935876493737926896537100258953637912558e+3L, // 323!
        1.5527704666093799787582081348443164818501047537558e+3L, // 324!
        1.5585542917917097162434631409523341757339612244091e+3L, // 325!
        1.5643411891730764238869453054399131021786686115662e+3L, // 326!
        1.5701311493439736772787178671290448295343764510076e+3L, // 327!
        1.5759241629523578210108363268664567668269793618800e+3L, // 328!
        1.5817202207031231929027626302796721202655124971116e+3L, // 329!
        1.5875193133575837188222378105492441394775827960120e+3L, // 330!
        1.5933214317329607817230224273888207762842798531077e+3L, // 331!
        1.5991265667018772702653323638550284998734601664331e+3L, // 332!
        1.6049347091918577140924909499999049984466552251359e+3L, // 333!
        1.6107458501848344145091679328981079543805280478729e+3L, // 334!
        1.6165599807166594809434387642276978647706205821304e+3L, // 335!
        1.6223770918766226851776082906938962764772071579552e+3L, // 336!
        1.6281971748069750469021131572485447076901045137244e+3L, // 337!
        1.6340202207024580656836373642531335214677905497483e+3L, // 338!
        1.6398462208098385159436147409836720688444673706949e+3L, // 339!
        1.6456751664274487230172994991776877361557321753304e+3L, // 340!
        1.6515070489047322398072906070801952226660038211148e+3L, // 341!
        1.6573418596417948449595073571073863041806116816262e+3L, // 342!
        1.6631795900889607848748234153377158433695229358149e+3L, // 343!
        1.6690202317463341832265479542154362201093085724029e+3L, // 344!
        1.6748637761633655429833507116173951295719240446298e+3L, // 345!
        1.6807102149384232672397014441272942976091853976719e+3L, // 346!
        1.6865595397183701264320551209736801571437795759483e+3L, // 347!
        1.6924117421981446007694681024858809475900725796887e+3L, // 348!
        1.6982668141203470279326675840083795872992214650262e+3L, // 349!
        1.7041247472748304872963916875397333188759852525987e+3L, // 350!
        1.7099855334982963531066309106920662145947329922169e+3L, // 351!
        1.7158491646738944501977790148773222267349321997427e+3L, // 352!
        1.7217156327308277469651747349945101967374234697004e+3L, // 353!
        1.7275849296439615214166032627266105966342098071820e+3L, // 354!
        1.7334570474334369372125334765923498183704949850629e+3L, // 355!
        1.7393319781642889676696857563759360207260506457188e+3L, // 356!
        1.7452097139460686067464358889741748526959234240188e+3L, // 357!
        1.7510902469324693070520309255256544314396018575713e+3L, // 358!
        1.7569735693209575859250790184112591114173168034380e+3L, // 359!
        1.7628596733524077416107219645827048801703638863110e+3L, // 360!
        1.7687485513107406225307400194464805872448386448336e+3L, // 361!
        1.7746401955225663935869963386065717727401544774095e+3L, // 362!
        1.7805345983568312443665154709994245570444453816752e+3L, // 363!
        1.7864317522244679850265087754273494085150387346182e+3L, // 364!
        1.7923316495780504765302016436180141387254690888174e+3L, // 365!
        1.7982342829114518427797655100798204557445077612526e+3L, // 366!
        1.8041396447595064130513849420189788849100374276877e+3L, // 367!
        1.8100477276976753439798606233366217873007818085399e+3L, // 368!
        1.8159585243417158711665178771835042462984532001250e+3L, // 369!
        1.8218720273473541412949039643092200576699543792008e+3L, // 370!
        1.8277882294099615764341537861916922951699514416833e+3L, // 371!
        1.8337071232642347229903126599960735312211998714403e+3L, // 372!
        1.8396287016838785385316483946011751953591186890629e+3L, // 373!
        1.8455529574812930704653771049184716277626040990638e+3L, // 374!
        1.8514798835072634812805746281550727163858283936844e+3L, // 375!
        1.8574094726506533757956472751892194197989509445895e+3L, // 376!
        1.8633417178381013865588840346631466500092507254482e+3L, // 377!
        1.8692766120337209742475923552388155834209057819856e+3L, // 378!
        1.8752141482388034005954095918224692113289945827950e+3L, // 379!
        1.8811543194915238320488538428304996056419085636793e+3L, // 380!
        1.8870971188666505330132965288751384237414299633610e+3L, // 381!
        1.8930425394752571081955637109487989674561139049719e+3L, // 382!
        1.8989905744644377541855567654859514377082952501101e+3L, // 383!
        1.9049412170170254810428726355730811993894712416084e+3L, // 384!
        1.9108944603513132652666406912277156960584556345462e+3L, // 385!
        1.9168502977207780961279128544025569313907212021732e+3L, // 386!
        1.9228087224138078779341761873897478298355753194737e+3L, // 387!
        1.9287697277534311513751273732543681446855352346451e+3L, // 388!
        1.9347333070970495976679759934880003173366540250633e+3L, // 389!
        1.9406994538361732897794427176211725258537078850545e+3L, // 390!
        1.9466681613961586555504990050708558485077384683819e+3L, // 391!
        1.9526394232359491180889614069221167376712391382442e+3L, // 392!
        1.9586132328478183793245060761702087892689945388066e+3L, // 393!
        1.9645895837571163131407031056208297968120786830033e+3L, // 394!
        1.9705684695220174350094768104955373953737778255820e+3L, // 395!
        1.9765498837332719155551637087902639292190455138203e+3L, // 396!
        1.9825338200139591059682471408204407885025278015715e+3L, // 397!
        1.9885202720192435436730744942337675022724944069864e+3L, // 398!
        1.9945092334361334071295841196460210612440163615351e+3L, // 399!
        2.0005006979832413891164545667983061427953695647811e+3L, // 400!
    };

    static constexpr long double ln_DBL_MAX = 7.097827128933839967321e2L;

    template<typename Input=size_t>
    long double ln_factorial_asymptotic_expansion(Input n) {
        auto initial_value = static_cast<Input>(ln_factorials.size());
        for (auto i = initial_value; i <= n; ++i) {
            auto new_factorial = ln_factorials[i - 1] + log(i);
            ln_factorials.push_back(new_factorial);
        }
        return ln_factorials[n];
    }

    template<typename Input=size_t>
    long double ln_factorial(Input n) {
        if (n < 0) return -LDBL_MAX;
        if (n < static_cast<Input>(ln_factorials.size())) return ln_factorials[n];
        return ln_factorial_asymptotic_expansion<Input>(n);
    }

    template<typename Output = long double, typename Input = size_t>
    Output log_binomial_coefficient(Input n, Input k) {
        return static_cast<Output>(ln_factorial(n) - ln_factorial(k) - ln_factorial(n - k));
    }

    /**
    * @brief Calculates the binomial coefficient C(n, k)
    *
    * @tparam Output : Output type
    * @tparam Input : Input type
    * @param n size of the fixed set
    * @param k size of the unordered subset
    * @return C(n, k)
    */
    template<typename Output, typename Input>
    Output binomialCoeff(Input n, Input k) {
        if ((k > n) || (n < 0) || (k < 0))
            return 0;

        // Since C(n, k) = C(n, n-k)
        if (k > n - k) k = n - k;

        Output res = 1;

        // Calculate value of [n * (n-1) * ... * (n-k+1)] / [k * (k-1) * ... * 1]
        for (Input i = 0; i < k; ++i) {
            res *= static_cast<Output>(n - i);
            res /= static_cast<Output>(i + 1);
        }

        return res;
    }

#if (HAS_BOOST)
    uint_type_ binomial_precision(size_t n, size_t k);
#endif

    /**
     * @brief Calculates the probability density function of a multivariate hypergeometric distribution.
     *
     * This function returns the probability that a sample of size @param n in a population of @param k
     * objects will have @param sample_counts counts of each object in a sample, given a population D
     * with @param population_counts counts of each object.
     *
     * The sampling is without replacement.
     *
     * @param m size of the population
     * @param k number of objects in the population
     * @param n size of the sample
     * @param sample_counts a vector containing the counts of each objects in the sample
     * @param population_counts a vector containing the counts of each objects in the population
     * @return probability of a sample occurring in the population.
     */
    double
    multivariateHypergeometricPDF(size_t m, size_t k, size_t n, const std::vector<size_t> &sample_counts,
                                  const std::vector<size_t> &population_counts);

    /**
    * @brief Calculates the probability density function of a multivariate hypergeometric distribution.
    *
    * This function returns the probability that a sample of size @param n in a population of @param k
    * objects will have @param sample_counts counts of each object in a sample, given a population D
    * with @param population_counts counts of each object.
    *
    * The sampling is without replacement.
    *
    * @param m size of the population
    * @param k number of objects in the population
    * @param n size of the sample
    * @param sample_counts a vector containing the counts of each objects in the sample
    * @param population_counts a vector containing the counts of each objects in the population
    * @return probability of a sample occurring in the population.
    */
    double
    multivariateHypergeometricPDF(size_t m, size_t k, size_t n, const std::vector<size_t> &sample_counts,
                                  const Eigen::Ref<const VectorXui> &population_counts);

    /**
    * @brief Calculates the probability density function of a multivariate hypergeometric distribution.
    *
    * This function returns the probability that a sample of size @param n in a population of @param k
    * objects will have @param sample_counts counts of each object in a sample, given a population D
    * with @param population_counts counts of each object.
    *
    * The sampling is without replacement.
    *
    * @param m size of the population
    * @param k number of objects in the population
    * @param n size of the sample
    * @param sample_counts a vector containing the counts of each objects in the sample
    * @param population_counts a vector containing the counts of each objects in the population
    * @return probability of a sample occurring in the population.
    */
    double
    multivariateHypergeometricPDF(size_t m, size_t k, size_t n, const Eigen::Ref<const VectorXui> &sample_counts,
                                  const Eigen::Ref<const VectorXui> &population_counts);

    /**
     * Calculates the Probability Mass Function of a multinomial distribution
     *
     * @param group_configuration
     * @param n
     * @param p
     * @throws invalid_argument
     * @return the probability of a specific group configuration occurring.
     */
    double multinomialPMF(const Eigen::Ref<const VectorXui> &group_configuration, size_t n,
                          const Eigen::Ref<const Vector> &p);

    /**
     * @brief Finds the number for elements given possible bins/slots and star types.
     *
     * @tparam T : Type of to use for the computation
     * @param stars : number of elements to fill the bins
     * @param bins : number of bins that can be filled
     * @return the number of possible combinations of stars in the bins.
     */
    template<typename T, typename O=T>
    O starsBars(T stars, T bins) {
        return egttools::binomialCoeff<O, T>(stars + bins - 1, stars);
    }

#if (HAS_BOOST)
    template<>
    inline uint_type_ starsBars<size_t, uint_type_>(size_t stars, size_t bins) {
        return egttools::binomial_precision(stars + bins - 1, stars);
    }
#endif
} // namespace egttools

#endif//EGTTOOLS_DISTRIBUTIONS_H
